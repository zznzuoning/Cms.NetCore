// <auto-generated />
using System;
using Cms.NetCore.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Cms.NetCore.Admin.Migrations
{
    [DbContext(typeof(CmsDBContext))]
    partial class CmsDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Cms.NetCore.Models.Buttion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnName("Code")
                        .HasMaxLength(20);

                    b.Property<DateTime>("CreateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CreateTime")
                        .HasDefaultValueSql("getdate()");

                    b.Property<Guid?>("CreateUserId")
                        .HasColumnName("CreateUserId");

                    b.Property<string>("Description")
                        .HasColumnName("Description")
                        .HasMaxLength(200);

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasColumnName("Icon")
                        .HasMaxLength(100);

                    b.Property<bool>("IsDelete");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("Name")
                        .HasMaxLength(20);

                    b.Property<int>("Sid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Sid")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Sort")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Sort")
                        .HasDefaultValue(1);

                    b.Property<DateTime>("UpdateTime")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("UpdateTime")
                        .HasDefaultValueSql("getdate()");

                    b.Property<Guid?>("UpdateUserId")
                        .HasColumnName("UpdateUserId");

                    b.HasKey("Id");

                    b.HasIndex("CreateUserId")
                        .IsUnique()
                        .HasFilter("[CreateUserId] IS NOT NULL");

                    b.HasIndex("UpdateUserId")
                        .IsUnique()
                        .HasFilter("[UpdateUserId] IS NOT NULL");

                    b.ToTable("Buttion");
                });

            modelBuilder.Entity("Cms.NetCore.Models.Department", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CreateTime")
                        .HasDefaultValueSql("getdate()");

                    b.Property<Guid?>("CreateUserId")
                        .HasColumnName("CreateUserId");

                    b.Property<bool>("IsDelete");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("Name")
                        .HasMaxLength(20);

                    b.Property<Guid?>("ParentId")
                        .HasColumnName("ParentId");

                    b.Property<int>("Sid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Sid")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Sort")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Sort")
                        .HasDefaultValue(1);

                    b.Property<DateTime>("UpdateTime")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("UpdateTime")
                        .HasDefaultValueSql("getdate()");

                    b.Property<Guid?>("UpdateUserId")
                        .HasColumnName("UpdateUserId");

                    b.HasKey("Id");

                    b.HasIndex("CreateUserId")
                        .IsUnique()
                        .HasFilter("[CreateUserId] IS NOT NULL");

                    b.HasIndex("ParentId");

                    b.HasIndex("UpdateUserId")
                        .IsUnique()
                        .HasFilter("[UpdateUserId] IS NOT NULL");

                    b.ToTable("Department");
                });

            modelBuilder.Entity("Cms.NetCore.Models.Menu", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BaseUrl")
                        .IsRequired()
                        .HasColumnName("BaseUrl")
                        .HasMaxLength(200);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnName("Code")
                        .HasMaxLength(20);

                    b.Property<DateTime>("CreateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CreateTime")
                        .HasDefaultValueSql("getdate()");

                    b.Property<Guid?>("CreateUserId")
                        .HasColumnName("CreateUserId");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasColumnName("Icon")
                        .HasMaxLength(100);

                    b.Property<bool>("IsDelete");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("Name")
                        .HasMaxLength(20);

                    b.Property<Guid?>("ParentID")
                        .HasColumnName("ParentID");

                    b.Property<int>("Sid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Sid")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Sort")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Sort")
                        .HasDefaultValue(1);

                    b.Property<DateTime>("UpdateTime")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("UpdateTime")
                        .HasDefaultValueSql("getdate()");

                    b.Property<Guid?>("UpdateUserId")
                        .HasColumnName("UpdateUserId");

                    b.HasKey("Id");

                    b.HasIndex("CreateUserId")
                        .IsUnique()
                        .HasFilter("[CreateUserId] IS NOT NULL");

                    b.HasIndex("ParentID");

                    b.HasIndex("UpdateUserId")
                        .IsUnique()
                        .HasFilter("[UpdateUserId] IS NOT NULL");

                    b.ToTable("Menu");
                });

            modelBuilder.Entity("Cms.NetCore.Models.MenuButton", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<Guid?>("ButtionId");

                    b.Property<Guid>("ButtonId")
                        .HasColumnName("ButtonId");

                    b.Property<Guid>("MenuId")
                        .HasColumnName("MenuId");

                    b.HasKey("Id");

                    b.HasIndex("ButtionId");

                    b.HasIndex("MenuId");

                    b.ToTable("MenuButton");
                });

            modelBuilder.Entity("Cms.NetCore.Models.OperationalLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnName("Action")
                        .HasMaxLength(20);

                    b.Property<string>("Controller")
                        .IsRequired()
                        .HasColumnName("Controller")
                        .HasMaxLength(30);

                    b.Property<string>("OperationalIp")
                        .IsRequired()
                        .HasColumnName("OperationalIp")
                        .HasMaxLength(30);

                    b.Property<DateTime>("OperationalTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OperationalTime")
                        .HasDefaultValueSql("getdate()");

                    b.Property<Guid>("UserManagerId")
                        .HasColumnName("UserManagerId");

                    b.HasKey("Id");

                    b.HasIndex("UserManagerId");

                    b.ToTable("OperationalLog");
                });

            modelBuilder.Entity("Cms.NetCore.Models.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CreateTime")
                        .HasDefaultValueSql("getdate()");

                    b.Property<Guid?>("CreateUserId")
                        .HasColumnName("CreateUserId");

                    b.Property<bool>("IsDefault")
                        .HasColumnName("IsDefault");

                    b.Property<bool>("IsDelete");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("RoleName")
                        .HasMaxLength(20);

                    b.Property<string>("Remarks")
                        .HasColumnName("Remarks")
                        .HasMaxLength(50);

                    b.Property<int>("Sid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Sid")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("UpdateTime")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("UpdateTime")
                        .HasDefaultValueSql("getdate()");

                    b.Property<Guid?>("UpdateUserId")
                        .HasColumnName("UpdateUserId");

                    b.HasKey("Id");

                    b.HasIndex("CreateUserId")
                        .IsUnique()
                        .HasFilter("[CreateUserId] IS NOT NULL");

                    b.HasIndex("UpdateUserId")
                        .IsUnique()
                        .HasFilter("[UpdateUserId] IS NOT NULL");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("Cms.NetCore.Models.RoleMenuButton", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<Guid>("MenuButtonId")
                        .HasColumnName("MenuButtonId");

                    b.Property<Guid>("RoleId")
                        .HasColumnName("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("MenuButtonId")
                        .IsUnique();

                    b.HasIndex("RoleId");

                    b.ToTable("RoleMenuButton");
                });

            modelBuilder.Entity("Cms.NetCore.Models.UserDepartment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<Guid>("DepartmentId")
                        .HasColumnName("DepartmentId");

                    b.Property<Guid>("UserManagerId")
                        .HasColumnName("UserManagerId");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("UserManagerId");

                    b.ToTable("UserDepartment");
                });

            modelBuilder.Entity("Cms.NetCore.Models.UserLogin", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("LastLoginIp")
                        .HasColumnName("LastLoginIp");

                    b.Property<DateTime?>("LastLoginTime")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("LastLoginTime");

                    b.Property<int>("LogInCount")
                        .HasColumnName("LogInCount");

                    b.Property<string>("PassWord")
                        .IsRequired()
                        .HasColumnName("PassWord");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnName("UserName")
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.ToTable("UserLogin");
                });

            modelBuilder.Entity("Cms.NetCore.Models.UserManager", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CreateTime")
                        .HasDefaultValueSql("getdate()");

                    b.Property<Guid?>("CreateUserId")
                        .HasColumnName("CreateUserId");

                    b.Property<string>("Email")
                        .HasColumnName("Email");

                    b.Property<string>("HeadImgUrl")
                        .HasColumnName("HeadImgUrl");

                    b.Property<bool>("IsDelete");

                    b.Property<bool>("IsEnabled")
                        .HasColumnName("IsEnabled");

                    b.Property<string>("Mobilephone")
                        .HasColumnName("Mobilephone");

                    b.Property<string>("RealName")
                        .IsRequired()
                        .HasColumnName("RealName")
                        .HasMaxLength(20);

                    b.Property<string>("Remarks")
                        .HasColumnName("Remarks")
                        .HasMaxLength(50);

                    b.Property<int>("Sid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Sid")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("UpdateTime")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("UpdateTime")
                        .HasDefaultValueSql("getdate()");

                    b.Property<Guid?>("UpdateUserId")
                        .HasColumnName("UpdateUserId");

                    b.Property<Guid>("UserLoginId")
                        .HasColumnName("UserLoginId");

                    b.HasKey("Id");

                    b.HasIndex("CreateUserId")
                        .IsUnique()
                        .HasFilter("[CreateUserId] IS NOT NULL");

                    b.HasIndex("UpdateUserId")
                        .IsUnique()
                        .HasFilter("[UpdateUserId] IS NOT NULL");

                    b.HasIndex("UserLoginId")
                        .IsUnique();

                    b.ToTable("UserManager");
                });

            modelBuilder.Entity("Cms.NetCore.Models.UserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<Guid>("RoleId")
                        .HasColumnName("RoleId");

                    b.Property<Guid>("UserManagerId")
                        .HasColumnName("UserManagerId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserManagerId");

                    b.ToTable("UserRole");
                });

            modelBuilder.Entity("Cms.NetCore.Models.Buttion", b =>
                {
                    b.HasOne("Cms.NetCore.Models.UserManager", "CreateUser")
                        .WithOne()
                        .HasForeignKey("Cms.NetCore.Models.Buttion", "CreateUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Cms.NetCore.Models.UserManager", "UpdateUser")
                        .WithOne()
                        .HasForeignKey("Cms.NetCore.Models.Buttion", "UpdateUserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Cms.NetCore.Models.Department", b =>
                {
                    b.HasOne("Cms.NetCore.Models.UserManager", "CreateUser")
                        .WithOne()
                        .HasForeignKey("Cms.NetCore.Models.Department", "CreateUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Cms.NetCore.Models.Department", "Departments")
                        .WithMany("Departmentss")
                        .HasForeignKey("ParentId");

                    b.HasOne("Cms.NetCore.Models.UserManager", "UpdateUser")
                        .WithOne()
                        .HasForeignKey("Cms.NetCore.Models.Department", "UpdateUserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Cms.NetCore.Models.Menu", b =>
                {
                    b.HasOne("Cms.NetCore.Models.UserManager", "CreateUser")
                        .WithOne()
                        .HasForeignKey("Cms.NetCore.Models.Menu", "CreateUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Cms.NetCore.Models.Menu", "ParentMenu")
                        .WithMany("ParentMenus")
                        .HasForeignKey("ParentID");

                    b.HasOne("Cms.NetCore.Models.UserManager", "UpdateUser")
                        .WithOne()
                        .HasForeignKey("Cms.NetCore.Models.Menu", "UpdateUserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Cms.NetCore.Models.MenuButton", b =>
                {
                    b.HasOne("Cms.NetCore.Models.Buttion", "Buttion")
                        .WithMany("MenuButtons")
                        .HasForeignKey("ButtionId");

                    b.HasOne("Cms.NetCore.Models.Menu", "Menu")
                        .WithMany("MenuButtons")
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Cms.NetCore.Models.OperationalLog", b =>
                {
                    b.HasOne("Cms.NetCore.Models.UserManager", "UserManager")
                        .WithMany("OperationalLogs")
                        .HasForeignKey("UserManagerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Cms.NetCore.Models.Role", b =>
                {
                    b.HasOne("Cms.NetCore.Models.UserManager", "CreateUser")
                        .WithOne()
                        .HasForeignKey("Cms.NetCore.Models.Role", "CreateUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Cms.NetCore.Models.UserManager", "UpdateUser")
                        .WithOne()
                        .HasForeignKey("Cms.NetCore.Models.Role", "UpdateUserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Cms.NetCore.Models.RoleMenuButton", b =>
                {
                    b.HasOne("Cms.NetCore.Models.MenuButton", "MenuButton")
                        .WithOne()
                        .HasForeignKey("Cms.NetCore.Models.RoleMenuButton", "MenuButtonId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Cms.NetCore.Models.Role", "Role")
                        .WithMany("RoleMenuButtons")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Cms.NetCore.Models.UserDepartment", b =>
                {
                    b.HasOne("Cms.NetCore.Models.Department", "Department")
                        .WithMany("UserDepartments")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Cms.NetCore.Models.UserManager", "UserManager")
                        .WithMany("UserDepartments")
                        .HasForeignKey("UserManagerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Cms.NetCore.Models.UserManager", b =>
                {
                    b.HasOne("Cms.NetCore.Models.UserManager", "CreateUser")
                        .WithOne()
                        .HasForeignKey("Cms.NetCore.Models.UserManager", "CreateUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Cms.NetCore.Models.UserManager", "UpdateUser")
                        .WithOne()
                        .HasForeignKey("Cms.NetCore.Models.UserManager", "UpdateUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Cms.NetCore.Models.UserLogin", "UserLogin")
                        .WithOne("UserManager")
                        .HasForeignKey("Cms.NetCore.Models.UserManager", "UserLoginId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Cms.NetCore.Models.UserRole", b =>
                {
                    b.HasOne("Cms.NetCore.Models.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Cms.NetCore.Models.UserManager", "UserManager")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserManagerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
